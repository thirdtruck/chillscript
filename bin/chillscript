#!/usr/bin/env ruby

require 'pp'

VAR_NAME = '(\w[\w-]*)'

def generic_error(error_description)
  puts "My bad. #{error_description}"
  exit
end

def compilation_error(error_description)
  generic_error(error_description)
end

def runtime_error(error_description)
  generic_error(error_description)
end

class ChillCondition
  def initialize(variable_name, expectation)
    @variable_name = variable_name
    @expectation = expectation
  end

  def expectation_met?(actual_variables)
    actual = actual_variables[@variable_name]

    if @expectation.class == Regexp 
      @expectation =~ actual
    elsif @expectation.class == Proc 
      @expectation.call(actual)
    else
      @expectation == actual
    end
  end
end

class ChillResponse
  def initialize(block)
    @block = block
  end

  def run
    @block.call
  end
end

class ChillPattern
  attr_reader :conditions
  attr_reader :responses

  def initialize(conditions=[], responses=[])
    @conditions = conditions
    @responses = responses
  end

  def run_responses
    @responses.each { |response| response.run }
  end

  def conditions_met?(actual_variables)
    any_met = false
    all_met = true

    @conditions.each do |condition|
      if condition.expectation_met?(actual_variables)
        any_met = true
      else
        all_met = false
      end
    end

    any_met && all_met
  end
end

class ChillVirtualMachine
  def initialize(script)
    @script = script
    @variables = {
      _program_started: false
    }
    @patterns = []
  end

  def build_condition_from(string)
    case string
    when /^#{VAR_NAME} exists$/
      variable_name = $1.to_sym
      expected = lambda { |actual| ! actual.nil? }
      ChillCondition.new(variable_name, expected)
    when /^#{VAR_NAME} is (true|false)/
      variable_name = $1.to_sym
      expected_value = ($2 == "true")
      ChillCondition.new(variable_name, expected_value)
    else
      compilation_error "I don't recognize this pattern condition: #{string}"
    end
  end

  def build_response_from(string)
    case string
    when /^(\w[\w-]*) becomes "([^"]*)"$/
      variable_name = $1.to_sym
      value = $2
      lambda { set(variable_name, value) }
    when /^(\w[\w-]*) becomes (true|false)$/
      variable_name = $1.to_sym
      value = ($2 == "true")
      lambda { set(variable_name, value) }
    when /^print (\w[\w-]*)$/
      variable_name = $1.to_sym
      lambda {
        if @variables.has_key? variable_name
          puts @variables[variable_name] 
        else
          runtime_error "I tried to print :#{variable_name}, but it hasn't been set yet. Sorry."
        end
      }
    else
      compilation_error "I don't know how to respond in this way: #{string}"
    end
  end

  def new_start_program_pattern
    condition = ChillCondition.new(:_program_started, false)
    response = lambda { @variables[:_program_started] = true }
    response = lambda { set(:_program_started, true) }
    ChillPattern.new([condition], [response])
  end

  def new_pattern(condition_text)
    if @current_pattern
      compilation_error "I think you're trying to start a new pattern, but haven't finished with the current one. Could you put an empty line before this so I don't get confused? Thanks! Line: #{line}"
    elsif condition_text == "START-PROGRAM"
      @current_pattern = new_start_program_pattern
    else
      condition = build_condition_from(condition_text)
      @current_pattern = ChillPattern.new([condition])
    end
  end

  def run
    @script.each_line do |line|
      case line
      when /^when (.*)/
        condition_text = $1
        new_pattern(condition_text)
      when /^and (.*)/
        condition_text = $1
        if @current_pattern
          condition = build_condition_from(condition_text)
          @current_pattern.conditions << condition
        else
          compilation_error "I think you're trying to make a pattern more specific, but I can't see where the pattern started. I'm confused by: #{line}"
        end
      when /^$/ # Empty line signifies the end of a pattern
        if @current_pattern
          @patterns << @current_pattern
          @current_pattern = nil
        end
      when /^  (.*)/
        response_text = $1
        response = build_response_from(response_text)
        if @current_pattern
          @current_pattern.responses << response
        else
          compilation_error "I could be wrong, but I think you're trying to write a response to a pattern that isn't there? Did you mean to indent this? #{line}"
        end
      else
        compilation_error "I don't understand this: #{line}"
      end
    end

    if @current_pattern
      @patterns << @current_pattern
    end

    match_against_patterns
  end

  def run_responses(responses)
    responses.each &:call
  end

  def set(variable_name, new_value)
    @variables[variable_name] = new_value
    @variable_changed = true
  end

  def match_against_patterns
    @variable_changed = false

    @patterns.each do |pattern|
      if pattern.conditions_met?(@variables)
        run_responses(pattern.responses)
      end
    end

    if @variable_changed
      match_against_patterns
    end
  end
end

script = <<SCRIPT
when greeting exists
and time-to-greet is true
  print greeting

when START-PROGRAM
  greeting becomes "Hello, World!"
  time-to-greet becomes true
SCRIPT

vm = ChillVirtualMachine.new(script)
vm.run
